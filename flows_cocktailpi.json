[
    {
        "id": "159042c95bd3ab0a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6deaf6535ba270c4",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fb3ef5218648e9ef",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d6dc8e9180ceab44",
        "type": "tab",
        "label": "Cocktail Machine System - Working",
        "disabled": false,
        "info": "Working cocktail machine control system"
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "Local MQTT",
        "broker": "localhost",
        "port": "1883",
        "clientid": "nodered_cocktail_simple",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "cocktail/master/status",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "online",
        "birthMsg": {},
        "closeTopic": "cocktail/master/status",
        "closeQos": "1",
        "closeRetain": "true",
        "closePayload": "offline",
        "closeMsg": {},
        "willTopic": "cocktail/master/status",
        "willQos": "1",
        "willRetain": "true",
        "willPayload": "offline",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ui_tab_main",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ui_tab_modules",
        "type": "ui_tab",
        "name": "Modules",
        "icon": "local_drink",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ui_group_discovered",
        "type": "ui_group",
        "name": "Discovered Modules",
        "tab": "ui_tab_modules",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_group_registered",
        "type": "ui_group",
        "name": "Registered Modules",
        "tab": "ui_tab_modules",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_group_control",
        "type": "ui_group",
        "name": "Module Control",
        "tab": "ui_tab_modules",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_group_testing",
        "type": "ui_group",
        "name": "Testing & Control",
        "tab": "ui_tab_modules",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_group_overview",
        "type": "ui_group",
        "name": "System Overview",
        "tab": "ui_tab_main",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e7b56dcde5ee3799",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ui_tab_settings",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "settings",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ui_group_auth",
        "type": "ui_group",
        "name": "Access Control",
        "tab": "ui_tab_settings",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_group_network",
        "type": "ui_group",
        "name": "Network Settings",
        "tab": "ui_tab_settings",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ui_group_dashboard_modules",
        "type": "ui_group",
        "name": "Registered Modules",
        "tab": "ui_tab_main",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9b66354bbb96069a",
        "type": "inject",
        "z": "d6dc8e9180ceab44",
        "name": "Initialize System",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "f0cd61dab4234977"
            ]
        ]
    },
    {
        "id": "f0cd61dab4234977",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Initialize Storage",
        "func": "// Initialize all storage\nflow.set('registered_modules', flow.get('registered_modules') || {});\nglobal.set('discovered_modules', {});\nglobal.set('active_modules', {});\nglobal.set('selected_module', null);\nglobal.set('selected_discovered', null);\nglobal.set('admin_authenticated', false);\n\n// Initialize pump duration with default value in both places\nflow.set('pump_duration', 1000);\nglobal.set('pump_duration', 1000);\n\n// Default network settings\nlet netSettings = flow.get('network_settings');\nif (!netSettings) {\n    flow.set('network_settings', {\n        home_ssid: '',\n        home_pass: '',\n        ap_ssid: 'CocktailMachine',\n        ap_pass: 'Cocktail2024!',\n        mqtt_host: '192.168.50.1',\n        mqtt_port: 1883\n    });\n}\n\nmsg.payload = {\n    status: 'System initialized',\n    timestamp: new Date()\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "887518357079336b"
            ]
        ]
    },
    {
        "id": "eb0689c8e6a1113d",
        "type": "mqtt in",
        "z": "d6dc8e9180ceab44",
        "name": "Module States",
        "topic": "cocktail/bottle/+/state",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_broker",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 140,
        "wires": [
            [
                "568b1dd5cbf71cd9"
            ]
        ]
    },
    {
        "id": "063f88742482fc18",
        "type": "mqtt in",
        "z": "d6dc8e9180ceab44",
        "name": "Module Status",
        "topic": "cocktail/bottle/+/status",
        "qos": "1",
        "datatype": "auto",
        "broker": "mqtt_broker",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "0d38b63f77205cae"
            ]
        ]
    },
    {
        "id": "568b1dd5cbf71cd9",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Process State",
        "func": "// Extract module ID from topic\nconst topicParts = msg.topic.split('/');\nconst moduleId = topicParts[2];\n\nlet registered = flow.get('registered_modules') || {};\nlet discovered = global.get('discovered_modules') || {};\nlet active = global.get('active_modules') || {};\n\n// Update active module with data\nif (!active[moduleId]) {\n    active[moduleId] = {\n        id: moduleId,\n        name: msg.payload.name || moduleId,\n        online: true,\n        state: msg.payload,\n        lastUpdate: new Date(),\n        firstSeen: new Date(),\n        dataPoints: 1\n    };\n} else {\n    active[moduleId].state = msg.payload;\n    active[moduleId].lastUpdate = new Date();\n    active[moduleId].online = true;\n    active[moduleId].dataPoints = (active[moduleId].dataPoints || 0) + 1;\n    \n    if (msg.payload.name) {\n        active[moduleId].name = msg.payload.name;\n        // Update registered module name if it exists\n        if (registered[moduleId]) {\n            registered[moduleId].name = msg.payload.name;\n            flow.set('registered_modules', registered);\n        }\n    }\n}\n\nglobal.set('active_modules', active);\n\n// Add to discovered if not registered\nif (!registered[moduleId]) {\n    discovered[moduleId] = {\n        id: moduleId,\n        name: msg.payload.name || moduleId,\n        lastSeen: new Date(),\n        state: msg.payload\n    };\n    global.set('discovered_modules', discovered);\n}\n\n// Return enhanced message\nmsg.moduleId = moduleId;\nmsg.moduleData = active[moduleId];\n\nreturn [msg, msg, msg];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 140,
        "wires": [
            [
                "2c4adf1f65fd9522"
            ],
            [
                "0fb98c55f18f14f1"
            ],
            [
                "efe154fa121944e4"
            ]
        ]
    },
    {
        "id": "0d38b63f77205cae",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Process Status",
        "func": "const topicParts = msg.topic.split('/');\nconst moduleId = topicParts[2];\nconst isOnline = (msg.payload === 'online');\n\nlet active = global.get('active_modules') || {};\n\n// Enhanced status tracking\nif (!active[moduleId]) {\n    active[moduleId] = {\n        id: moduleId,\n        name: moduleId,\n        online: isOnline,\n        state: {},\n        lastUpdate: new Date(),\n        firstSeen: new Date()\n    };\n} else {\n    active[moduleId].online = isOnline;\n    active[moduleId].lastUpdate = new Date();\n}\n\nglobal.set('active_modules', active);\n\nmsg.moduleId = moduleId;\nmsg.isOnline = isOnline;\nmsg.moduleData = active[moduleId];\n\nreturn [msg, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 200,
        "wires": [
            [
                "2c4adf1f65fd9522"
            ],
            [
                "0fb98c55f18f14f1"
            ]
        ]
    },
    {
        "id": "2c4adf1f65fd9522",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Update Discovered List",
        "func": "const registered = flow.get('registered_modules') || {};\nconst discovered = global.get('discovered_modules') || {};\nconst active = global.get('active_modules') || {};\n\n// Build discovered list (unregistered only)\nlet discList = 'Discovered Modules:\\n';\nlet count = 0;\nlet options = [];\n\nfor (const key in discovered) {\n  if (!registered[key] && active[key] && active[key].online) {\n    count++;\n    const state = active[key].state || {};\n    const level = state.valid ? `${state.pct}%` : '--';\n    const name = discovered[key].name || key;\n\n    discList += `${count}. ${name} (${key}) - Level: ${level}\\n`;\n    options.push({ label: `${name} (${key}) - ${level}`, value: key }); // no \"type\"\n  }\n}\n\nif (count === 0) {\n  discList += 'No unregistered modules found';\n  options = [{ label: 'No modules available', value: '' }];\n}\n\n// Send both msg.options and msg.ui_control.options (replace=true helps avoid caching issues)\nreturn [\n  { payload: discList, count },\n  { payload: '', options, ui_control: { replace: true, options } }\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 160,
        "wires": [
            [
                "35f4e2efb63f9022"
            ],
            [
                "af3516ef0871442a"
            ]
        ]
    },
    {
        "id": "0fb98c55f18f14f1",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Update Registered List",
        "func": "const registered = flow.get('registered_modules') || {};\nconst active = global.get('active_modules') || {};\n\nlet regList = 'Registered Modules:\\n';\nlet count = 0;\nlet options = [];\n\nfor (const key in registered) {\n  count++;\n  const mod = registered[key];\n  const am = active[key];\n\n  let status = 'Offline', level = '--', icon = '🔴';\n  if (am) {\n    const last = am.lastUpdate ? new Date(am.lastUpdate) : null;\n    const recent = last ? (Date.now() - last.getTime()) < 30000 : false;\n    if (am.online && recent) { status = 'Online'; icon = '🟢'; }\n    else if (am.online && !recent) { status = 'Stale'; icon = '🟡'; }\n    if (am.state?.valid) level = `${am.state.pct}%`;\n  }\n\n  const name = mod?.name || key;\n  regList += `${count}. ${name} (${key}) - ${level} - ${status}\\n`;\n  options.push({ label: `${icon} ${name} (${key}) - ${level}`, value: key }); // no \"type\"\n}\n\nif (count === 0) {\n  regList += 'No registered modules';\n  options = [{ label: 'No modules registered', value: '' }];\n}\n\n// Send both msg.options and msg.ui_control.options\nreturn [\n  { payload: regList, count },\n  { payload: '', options, ui_control: { replace: true, options } }\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 260,
        "wires": [
            [
                "7609263f016372f7"
            ],
            [
                "7e55da40a40d2f67"
            ]
        ]
    },
    {
        "id": "70f366edeca288c5",
        "type": "ui_text",
        "z": "d6dc8e9180ceab44",
        "group": "ui_group_discovered",
        "order": 1,
        "width": "6",
        "height": "4",
        "name": "Discovered List",
        "label": "",
        "format": "<pre style=\"font-size: 12px; line-height: 1.2;\">{{msg.payload}}</pre>",
        "layout": "col-center",
        "className": "",
        "x": 1320,
        "y": 140,
        "wires": []
    },
    {
        "id": "7609263f016372f7",
        "type": "ui_text",
        "z": "d6dc8e9180ceab44",
        "group": "ui_group_registered",
        "order": 1,
        "width": "6",
        "height": "4",
        "name": "Registered List",
        "label": "",
        "format": "<pre style=\"font-size: 12px; line-height: 1.2;\">{{msg.payload}}</pre>",
        "layout": "col-center",
        "className": "",
        "x": 1340,
        "y": 280,
        "wires": []
    },
    {
        "id": "af3516ef0871442a",
        "type": "ui_dropdown",
        "z": "d6dc8e9180ceab44",
        "name": "Select Discovered Module",
        "label": "Select Module to Register:",
        "tooltip": "",
        "place": "Choose a module...",
        "group": "ui_group_discovered",
        "order": 2,
        "width": "6",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "discovered_dropdown",
        "topicType": "str",
        "className": "",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "1c7780ca680195f6"
            ]
        ]
    },
    {
        "id": "7e55da40a40d2f67",
        "type": "ui_dropdown",
        "z": "d6dc8e9180ceab44",
        "name": "Select Registered Module",
        "label": "Select Module to Control:",
        "tooltip": "",
        "place": "Choose a module...",
        "group": "ui_group_registered",
        "order": 2,
        "width": "6",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "registered_dropdown",
        "topicType": "str",
        "className": "",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "d412cda73e8bfde7"
            ]
        ]
    },
    {
        "id": "1c7780ca680195f6",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Store Selected Discovered",
        "func": "if (msg.payload && msg.payload !== '') {\n    global.set('selected_discovered', msg.payload);\n    node.log(`Selected discovered module: ${msg.payload}`);\n    msg.notification = `Selected discovered: ${msg.payload}`;\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 280,
        "wires": [
            [
                "5c6d623f60423b92"
            ]
        ]
    },
    {
        "id": "d412cda73e8bfde7",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Store Selected Module",
        "func": "if (msg.payload && msg.payload !== '') {\n    global.set('selected_module', msg.payload);\n    node.log(`Selected registered module: ${msg.payload}`);\n    msg.notification = `Selected for control: ${msg.payload}`;\n    return [msg, msg];\n}\nreturn [null, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 340,
        "wires": [
            [
                "efe154fa121944e4"
            ],
            [
                "5c6d623f60423b92"
            ]
        ]
    },
    {
        "id": "485141ad1d32a389",
        "type": "ui_button",
        "z": "d6dc8e9180ceab44",
        "name": "Clear Discovered Selection",
        "group": "ui_group_discovered",
        "order": 2.5,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Clear Selection",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "clear",
        "payload": "",
        "payloadType": "str",
        "topic": "clear_discovered",
        "topicType": "str",
        "x": 150,
        "y": 305,
        "wires": [
            [
                "45481194847afa1a"
            ]
        ]
    },
    {
        "id": "37cd287b72a1b132",
        "type": "ui_button",
        "z": "d6dc8e9180ceab44",
        "name": "Clear Registered Selection",
        "group": "ui_group_registered",
        "order": 2.5,
        "width": "6",
        "height": "1",
        "passthru": false,
        "label": "Clear Selection",
        "tooltip": "",
        "color": "",
        "bgcolor": "grey",
        "className": "",
        "icon": "clear",
        "payload": "",
        "payloadType": "str",
        "topic": "clear_registered",
        "topicType": "str",
        "x": 150,
        "y": 365,
        "wires": [
            [
                "395504cea0e04106"
            ]
        ]
    },
    {
        "id": "45481194847afa1a",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Clear Discovered Selection",
        "func": "global.set('selected_discovered', null);\nmsg.notification = '🧹 Discovered selection cleared';\n// Also clear the dropdown display\nreturn [msg, {payload: ''}];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 305,
        "wires": [
            [
                "5c6d623f60423b92"
            ],
            [
                "af3516ef0871442a"
            ]
        ]
    },
    {
        "id": "395504cea0e04106",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Clear Registered Selection",
        "func": "global.set('selected_module', null);\nmsg.notification = '🧹 Registered selection cleared';\n// Also clear the dropdown display\nreturn [msg, msg, {payload: ''}];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 365,
        "wires": [
            [
                "efe154fa121944e4"
            ],
            [
                "5c6d623f60423b92"
            ],
            [
                "7e55da40a40d2f67"
            ]
        ]
    },
    {
        "id": "a613c3b007cf494b",
        "type": "ui_button",
        "z": "d6dc8e9180ceab44",
        "name": "Register Module",
        "group": "ui_group_discovered",
        "order": 3,
        "width": "6",
        "height": "2",
        "passthru": false,
        "label": "✅ REGISTER SELECTED MODULE",
        "tooltip": "",
        "color": "white",
        "bgcolor": "#4CAF50",
        "className": "",
        "icon": "add_circle",
        "payload": "register",
        "payloadType": "str",
        "topic": "register",
        "topicType": "str",
        "x": 120,
        "y": 400,
        "wires": [
            [
                "c0020e2a43b94e0e"
            ]
        ]
    },
    {
        "id": "c0020e2a43b94e0e",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Register Module",
        "func": "const selectedId = global.get('selected_discovered');\nif (!selectedId) {\n    msg.notification = '⚠️ Please select a module from the dropdown first';\n    return [null, msg];\n}\n\nconst discovered = global.get('discovered_modules') || {};\nconst active = global.get('active_modules') || {};\nlet registered = flow.get('registered_modules') || {};\n\nif (registered[selectedId]) {\n    msg.notification = '⚠️ Module already registered';\n    return [null, msg];\n}\n\nconst moduleInfo = discovered[selectedId] || active[selectedId];\nif (!moduleInfo) {\n    msg.notification = '❌ Module not found';\n    return [null, msg];\n}\n\n// Register the module\nregistered[selectedId] = {\n    id: selectedId,\n    name: moduleInfo.name || selectedId,\n    registered: new Date()\n};\nflow.set('registered_modules', registered);\n\n// Remove from discovered\ndelete discovered[selectedId];\nglobal.set('discovered_modules', discovered);\n\n// Clear selection after successful registration\nglobal.set('selected_discovered', null);\n\nmsg.notification = `✅ Module ${moduleInfo.name} registered successfully`;\nmsg.payload = true;\n\nnode.log(`Module ${selectedId} registered successfully`);\n\n// Return update trigger, notification, and clear dropdown\nreturn [msg, msg, {payload: ''}];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 400,
        "wires": [
            [
                "fbe24b8dca7fd55e"
            ],
            [
                "5c6d623f60423b92"
            ],
            [
                "af3516ef0871442a"
            ]
        ]
    },
    {
        "id": "52a2af3a7b4bbded",
        "type": "ui_button",
        "z": "d6dc8e9180ceab44",
        "name": "Delete Module",
        "group": "ui_group_registered",
        "order": 3,
        "width": "6",
        "height": "2",
        "passthru": false,
        "label": "🗑️ UNREGISTER SELECTED MODULE",
        "tooltip": "",
        "color": "white",
        "bgcolor": "#F44336",
        "className": "",
        "icon": "delete",
        "payload": "delete",
        "payloadType": "str",
        "topic": "delete",
        "topicType": "str",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "f61406e8b7ddac38"
            ]
        ]
    },
    {
        "id": "f61406e8b7ddac38",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Delete Module",
        "func": "const selectedId = global.get('selected_module');\nif (!selectedId) {\n    msg.notification = '⚠️ Please select a module from the dropdown first';\n    return [null, msg];\n}\n\nlet registered = flow.get('registered_modules') || {};\nconst moduleName = registered[selectedId] ? registered[selectedId].name : selectedId;\n\ndelete registered[selectedId];\nflow.set('registered_modules', registered);\n\n// Clear selection after deletion\nglobal.set('selected_module', null);\n\nnode.log(`Module ${selectedId} unregistered`);\n\nmsg.notification = `🗑️ Module ${moduleName} unregistered`;\n\n// Return update trigger, notification, and clear dropdown\nreturn [msg, msg, {payload: ''}];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 460,
        "wires": [
            [
                "fbe24b8dca7fd55e"
            ],
            [
                "5c6d623f60423b92"
            ],
            [
                "7e55da40a40d2f67"
            ]
        ]
    },
    {
        "id": "fbe24b8dca7fd55e",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Trigger Update",
        "func": "return [msg, msg, msg];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 430,
        "wires": [
            [
                "2c4adf1f65fd9522"
            ],
            [
                "0fb98c55f18f14f1"
            ],
            [
                "887518357079336b"
            ]
        ]
    },
    {
        "id": "efe154fa121944e4",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Update Module Display",
        "func": "const selectedId = global.get('selected_module');\nif (!selectedId) {\n    return [\n        {payload: 0},\n        {payload: '--'},\n        {payload: '--'},\n        {payload: 'No module selected'},\n        {payload: 'Unknown'},\n        {payload: '--'}\n    ];\n}\n\nconst active = global.get('active_modules') || {};\nconst module = active[selectedId];\n\nif (!module) {\n    return [\n        {payload: 0},\n        {payload: '--'},\n        {payload: '--'},\n        {payload: selectedId},\n        {payload: 'Offline'},\n        {payload: 'Never'}\n    ];\n}\n\nconst state = module.state || {};\nconst timeDiff = new Date() - new Date(module.lastUpdate);\nconst isRecent = timeDiff < 30000; // Within 30 seconds\n\nlet statusText = 'Unknown';\nif (module.online && isRecent) {\n    statusText = 'Online';\n} else if (module.online && !isRecent) {\n    statusText = 'Stale Data';\n} else {\n    statusText = 'Offline';\n}\n\nconst lastSeenText = new Date(module.lastUpdate).toLocaleString();\n\nreturn [\n    {payload: state.valid ? state.pct : 0},\n    {payload: state.valid ? `${state.ml} mL` : '--'},\n    {payload: state.pump || 'STOP'},\n    {payload: module.name},\n    {payload: statusText},\n    {payload: lastSeenText}\n];",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 540,
        "wires": [
            [
                "0fb57a769b4d3f6a"
            ],
            [
                "f731e56dcfa0a408"
            ],
            [
                "95608bcc3ae004a5"
            ],
            [
                "125cacfc620bb55a"
            ],
            [
                "1b22cfcfc8234f8e"
            ],
            [
                "726a7560c1c90340"
            ]
        ]
    },
    {
        "id": "0fb57a769b4d3f6a",
        "type": "ui_gauge",
        "z": "d6dc8e9180ceab44",
        "name": "Level Gauge",
        "group": "ui_group_control",
        "order": 1,
        "width": "6",
        "height": "4",
        "gtype": "gage",
        "title": "Level",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ff0000",
            "#ffff00",
            "#00ff00"
        ],
        "seg1": "30",
        "seg2": "70",
        "className": "",
        "x": 810,
        "y": 500,
        "wires": []
    },
    {
        "id": "f731e56dcfa0a408",
        "type": "ui_text",
        "z": "d6dc8e9180ceab44",
        "group": "ui_group_control",
        "order": 2,
        "width": "3",
        "height": "1",
        "name": "Volume",
        "label": "Volume:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 800,
        "y": 540,
        "wires": []
    },
    {
        "id": "95608bcc3ae004a5",
        "type": "ui_text",
        "z": "d6dc8e9180ceab44",
        "group": "ui_group_control",
        "order": 3,
        "width": "3",
        "height": "1",
        "name": "Pump State",
        "label": "Pump:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 810,
        "y": 580,
        "wires": []
    },
    {
        "id": "125cacfc620bb55a",
        "type": "ui_text",
        "z": "d6dc8e9180ceab44",
        "group": "ui_group_control",
        "order": 4,
        "width": "3",
        "height": "1",
        "name": "Module Name",
        "label": "Name:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 820,
        "y": 620,
        "wires": []
    },
    {
        "id": "1b22cfcfc8234f8e",
        "type": "ui_text",
        "z": "d6dc8e9180ceab44",
        "group": "ui_group_control",
        "order": 5,
        "width": "3",
        "height": "1",
        "name": "Module Status",
        "label": "Status:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 820,
        "y": 660,
        "wires": []
    },
    {
        "id": "726a7560c1c90340",
        "type": "ui_text",
        "z": "d6dc8e9180ceab44",
        "group": "ui_group_control",
        "order": 6,
        "width": "6",
        "height": "1",
        "name": "Last Seen",
        "label": "Last Update:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 810,
        "y": 700,
        "wires": []
    },
    {
        "id": "efa9265e7b7791ab",
        "type": "ui_button",
        "z": "d6dc8e9180ceab44",
        "name": "Pump FWD",
        "group": "ui_group_testing",
        "order": 1,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "DOSE FWD",
        "tooltip": "",
        "color": "white",
        "bgcolor": "#4CAF50",
        "className": "",
        "icon": "arrow_forward",
        "payload": "FWD",
        "payloadType": "str",
        "topic": "pump",
        "topicType": "str",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "f1f485e08a79b164"
            ]
        ]
    },
    {
        "id": "780729b4dd7470bf",
        "type": "ui_button",
        "z": "d6dc8e9180ceab44",
        "name": "Pump REV",
        "group": "ui_group_testing",
        "order": 2,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "PRIME REV",
        "tooltip": "",
        "color": "white",
        "bgcolor": "#FF9800",
        "className": "",
        "icon": "arrow_back",
        "payload": "REV",
        "payloadType": "str",
        "topic": "pump",
        "topicType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "f1f485e08a79b164"
            ]
        ]
    },
    {
        "id": "3c9fa4059efdb473",
        "type": "ui_button",
        "z": "d6dc8e9180ceab44",
        "name": "Pump STOP",
        "group": "ui_group_testing",
        "order": 3,
        "width": "6",
        "height": "2",
        "passthru": false,
        "label": "EMERGENCY STOP",
        "tooltip": "",
        "color": "white",
        "bgcolor": "#F44336",
        "className": "",
        "icon": "stop",
        "payload": "STOP",
        "payloadType": "str",
        "topic": "pump",
        "topicType": "str",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "f1f485e08a79b164"
            ]
        ]
    },
    {
        "id": "1a735e37144f125a",
        "type": "ui_numeric",
        "z": "d6dc8e9180ceab44",
        "name": "Duration",
        "label": "Duration (ms):",
        "tooltip": "",
        "group": "ui_group_testing",
        "order": 4,
        "width": "6",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "duration",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "step": "100",
        "className": "",
        "x": 100,
        "y": 880,
        "wires": [
            [
                "bb7c5632682f61dc"
            ]
        ]
    },
    {
        "id": "bb7c5632682f61dc",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Store Duration",
        "func": "const duration = parseInt(msg.payload) || 0;\nflow.set('pump_duration', duration);\nnode.log(`Pump duration set to: ${duration}ms`);\n// Also store in global for extra reliability\nglobal.set('pump_duration', duration);\nmsg.payload = duration;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "f1f485e08a79b164",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Fixed Pump Control",
        "func": "const selectedModule = global.get('selected_module');\nif (!selectedModule) {\n    msg.notification = '⚠️ Please select a module first';\n    return [null, msg];\n}\n\n// Check if module is online\nconst active = global.get('active_modules') || {};\nconst moduleData = active[selectedModule];\nif (!moduleData || !moduleData.online) {\n    msg.notification = `❌ Module ${selectedModule} is offline`;\n    return [null, msg];\n}\n\n// Get duration from both flow and global storage for reliability\nlet duration = parseInt(flow.get('pump_duration')) || parseInt(global.get('pump_duration')) || 0;\nnode.log(`Using duration: ${duration}ms (flow: ${flow.get('pump_duration')}, global: ${global.get('pump_duration')})`);\n\nmsg.topic = `cocktail/bottle/${selectedModule}/cmd`;\n\nif (msg.payload === 'STOP') {\n    msg.payload = {\n        action: 'stop',\n        timestamp: new Date().toISOString(),\n        source: 'dashboard'\n    };\n    msg.notification = `🛑 Pump STOP sent to ${moduleData.name}`;\n} else if (msg.payload === 'FWD') {\n    msg.payload = {\n        action: 'dose',\n        dir: 'FWD',\n        ms: duration,\n        timestamp: new Date().toISOString(),\n        source: 'dashboard'\n    };\n    msg.notification = `▶️ Pump FWD (${duration}ms) sent to ${moduleData.name}`;\n} else if (msg.payload === 'REV') {\n    msg.payload = {\n        action: 'prime',\n        dir: 'REV',\n        ms: duration,\n        timestamp: new Date().toISOString(),\n        source: 'dashboard'\n    };\n    msg.notification = `◀️ Pump REV (${duration}ms) sent to ${moduleData.name}`;\n}\n\n// Enhanced logging\nnode.log(`Pump command sent to ${selectedModule}: ${JSON.stringify(msg.payload)}`);\n\nreturn [msg, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 800,
        "wires": [
            [
                "94fb67ebea48424f"
            ],
            [
                "5c6d623f60423b92"
            ]
        ]
    },
    {
        "id": "e3058d29cd99cce2",
        "type": "ui_dropdown",
        "z": "d6dc8e9180ceab44",
        "name": "Name Dropdown",
        "label": "Module Name:",
        "tooltip": "",
        "place": "Select name...",
        "group": "ui_group_control",
        "order": 7,
        "width": "4",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Vodka",
                "value": "Vodka",
                "type": "str"
            },
            {
                "label": "Rum",
                "value": "Rum",
                "type": "str"
            },
            {
                "label": "Gin",
                "value": "Gin",
                "type": "str"
            },
            {
                "label": "Whiskey",
                "value": "Whiskey",
                "type": "str"
            },
            {
                "label": "Tequila",
                "value": "Tequila",
                "type": "str"
            },
            {
                "label": "Triple Sec",
                "value": "Triple Sec",
                "type": "str"
            },
            {
                "label": "Cranberry Juice",
                "value": "Cranberry Juice",
                "type": "str"
            },
            {
                "label": "Orange Juice",
                "value": "Orange Juice",
                "type": "str"
            },
            {
                "label": "Lime Juice",
                "value": "Lime Juice",
                "type": "str"
            },
            {
                "label": "Simple Syrup",
                "value": "Simple Syrup",
                "type": "str"
            },
            {
                "label": "Grenadine",
                "value": "Grenadine",
                "type": "str"
            },
            {
                "label": "Soda Water",
                "value": "Soda Water",
                "type": "str"
            },
            {
                "label": "Tonic Water",
                "value": "Tonic Water",
                "type": "str"
            },
            {
                "label": "Ginger Beer",
                "value": "Ginger Beer",
                "type": "str"
            },
            {
                "label": "Cola",
                "value": "Cola",
                "type": "str"
            },
            {
                "label": "Custom Name...",
                "value": "CUSTOM",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "name_dropdown",
        "topicType": "str",
        "className": "",
        "x": 110,
        "y": 940,
        "wires": [
            [
                "cfe121660503936e"
            ]
        ]
    },
    {
        "id": "fc186a8cf5167fb3",
        "type": "ui_text_input",
        "z": "d6dc8e9180ceab44",
        "name": "Custom Name Input",
        "label": "Enter Custom Name:",
        "tooltip": "",
        "group": "ui_group_control",
        "order": 7.5,
        "width": "4",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "custom_name",
        "sendOnBlur": false,
        "className": "hidden-by-default",
        "topicType": "str",
        "x": 110,
        "y": 965,
        "wires": [
            [
                "cfe121660503936e"
            ]
        ]
    },
    {
        "id": "cfe121660503936e",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Store Name",
        "func": "// Debug logging\nnode.log(`Name input received: '${msg.payload}' from topic: '${msg.topic}'`);\n\nif (msg.topic === 'name_dropdown') {\n    if (msg.payload === 'CUSTOM') {\n        // Show custom input field and clear pending name\n        flow.set('pending_name', '');\n        flow.set('show_custom_input', true);\n        node.log('Custom name selected - waiting for custom input');\n        // Send message to show custom input (you could add UI control here)\n        return {payload: 'show_custom', topic: 'ui_control'};\n    } else {\n        // Use selected name from dropdown\n        flow.set('pending_name', msg.payload);\n        flow.set('show_custom_input', false);\n        node.log(`Dropdown name stored: '${msg.payload}'`);\n    }\n} else if (msg.topic === 'custom_name') {\n    // Store custom name\n    flow.set('pending_name', msg.payload);\n    flow.set('show_custom_input', false);\n    node.log(`Custom name stored: '${msg.payload}'`);\n}\n\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 940,
        "wires": []
    },
    {
        "id": "ace8c946204b9635",
        "type": "ui_button",
        "z": "d6dc8e9180ceab44",
        "name": "Apply Name",
        "group": "ui_group_control",
        "order": 8,
        "width": "6",
        "height": "2",
        "passthru": false,
        "label": "✏️ APPLY NAME CHANGE",
        "tooltip": "",
        "color": "white",
        "bgcolor": "#2196F3",
        "className": "",
        "icon": "check",
        "payload": "apply",
        "payloadType": "str",
        "topic": "apply_name",
        "topicType": "str",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "bd6586cf26eee26d"
            ]
        ]
    },
    {
        "id": "bd6586cf26eee26d",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Fixed Send Name Update",
        "func": "const selectedModule = global.get('selected_module');\nif (!selectedModule) {\n    msg.notification = '⚠️ Please select a module first';\n    return [null, msg];\n}\n\nconst newName = flow.get('pending_name');\nnode.log(`Send name called - Selected: ${selectedModule}, Pending name: '${newName}'`);\n\nif (!newName || newName.trim() === '') {\n    msg.notification = '⚠️ Please enter a name';\n    return [null, msg];\n}\n\n// Check if module is online\nconst active = global.get('active_modules') || {};\nconst moduleData = active[selectedModule];\nif (!moduleData || !moduleData.online) {\n    msg.notification = `❌ Module ${selectedModule} is offline`;\n    return [null, msg];\n}\n\n// Update stored data\nlet registered = flow.get('registered_modules') || {};\nif (registered[selectedModule]) {\n    registered[selectedModule].name = newName.trim();\n    flow.set('registered_modules', registered);\n}\n\nif (active[selectedModule]) {\n    active[selectedModule].name = newName.trim();\n    global.set('active_modules', active);\n}\n\n// Send command to module with correct format\nmsg.topic = `cocktail/bottle/${selectedModule}/cmd`;\nmsg.payload = {\n    action: 'set_name',\n    name: newName.trim(),\n    timestamp: new Date().toISOString(),\n    source: 'dashboard'\n};\n\nconst notification = {\n    notification: `✏️ Name change sent to ${selectedModule}: ${newName.trim()}`\n};\n\nnode.log(`Name change command sent to ${selectedModule}: ${newName.trim()}`);\nnode.log(`MQTT payload: ${JSON.stringify(msg.payload)}`);\n\nreturn [msg, notification];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 980,
        "wires": [
            [
                "94fb67ebea48424f"
            ],
            [
                "5c6d623f60423b92"
            ]
        ]
    },
    {
        "id": "2d7123382b229d4c",
        "type": "ui_text_input",
        "z": "d6dc8e9180ceab44",
        "name": "Password",
        "label": "Admin Password:",
        "tooltip": "",
        "group": "ui_group_auth",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "mode": "password",
        "delay": "0",
        "topic": "password",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 110,
        "y": 1080,
        "wires": [
            [
                "f89d8537e9ccf292"
            ]
        ]
    },
    {
        "id": "f89d8537e9ccf292",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Check Password",
        "func": "// Default password - CHANGE THIS!\nconst ADMIN_PASSWORD = 'cocktail2024';\n\nif (msg.payload === ADMIN_PASSWORD) {\n    global.set('admin_authenticated', true);\n    msg.notification = '🔓 Admin access granted';\n    msg.payload = true;\n} else {\n    global.set('admin_authenticated', false);\n    msg.notification = '🔒 Access denied - incorrect password';\n    msg.payload = false;\n}\n\nreturn [msg, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1080,
        "wires": [
            [
                "0aaa832d502d39ad"
            ],
            [
                "5c6d623f60423b92"
            ]
        ]
    },
    {
        "id": "0aaa832d502d39ad",
        "type": "ui_text",
        "z": "d6dc8e9180ceab44",
        "group": "ui_group_auth",
        "order": 2,
        "width": "6",
        "height": "1",
        "name": "Auth Status",
        "label": "Status:",
        "format": "{{msg.payload ? '🔓 Authenticated' : '🔒 Not Authenticated'}}",
        "layout": "row-spread",
        "className": "",
        "x": 530,
        "y": 1080,
        "wires": []
    },
    {
        "id": "33193ad7f1e7b5c4",
        "type": "ui_text_input",
        "z": "d6dc8e9180ceab44",
        "name": "Home SSID",
        "label": "Home WiFi SSID:",
        "tooltip": "",
        "group": "ui_group_network",
        "order": 1,
        "width": "6",
        "height": "1",
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "home_ssid",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "e22226cba66c17f1"
            ]
        ]
    },
    {
        "id": "c22f38dfe8646033",
        "type": "ui_text_input",
        "z": "d6dc8e9180ceab44",
        "name": "Home Pass",
        "label": "Home WiFi Pass:",
        "tooltip": "",
        "group": "ui_group_network",
        "order": 2,
        "width": "6",
        "height": "1",
        "passthru": false,
        "mode": "password",
        "delay": "0",
        "topic": "home_pass",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 110,
        "y": 1180,
        "wires": [
            [
                "e22226cba66c17f1"
            ]
        ]
    },
    {
        "id": "e22226cba66c17f1",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Store Network Settings",
        "func": "let settings = flow.get('network_settings') || {};\n\nif (msg.topic === 'home_ssid') {\n    settings.home_ssid = msg.payload;\n} else if (msg.topic === 'home_pass') {\n    settings.home_pass = msg.payload;\n}\n\nsettings.lastUpdated = new Date();\nflow.set('network_settings', settings);\nmsg.notification = '📶 Network settings updated';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1160,
        "wires": [
            [
                "5c6d623f60423b92"
            ]
        ]
    },
    {
        "id": "89697c721360063f",
        "type": "ui_button",
        "z": "d6dc8e9180ceab44",
        "name": "Apply Network",
        "group": "ui_group_network",
        "order": 3,
        "width": "6",
        "height": "2",
        "passthru": false,
        "label": "📶 APPLY NETWORK SETTINGS TO ALL MODULES",
        "tooltip": "",
        "color": "white",
        "bgcolor": "#4CAF50",
        "className": "",
        "icon": "wifi",
        "payload": "apply",
        "payloadType": "str",
        "topic": "apply_network",
        "topicType": "str",
        "x": 120,
        "y": 1220,
        "wires": [
            [
                "12247c49a5a2d40a"
            ]
        ]
    },
    {
        "id": "12247c49a5a2d40a",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "Apply Network to Modules",
        "func": "const isAuthenticated = global.get('admin_authenticated');\nif (!isAuthenticated) {\n    msg.notification = '🔒 Admin authentication required';\n    return [null, msg];\n}\n\nconst settings = flow.get('network_settings') || {};\nif (!settings.home_ssid) {\n    msg.notification = '⚠️ Home SSID not configured';\n    return [null, msg];\n}\n\nconst active = global.get('active_modules') || {};\nconst onlineModules = Object.keys(active).filter(id => active[id].online);\n\nif (onlineModules.length === 0) {\n    msg.notification = '⚠️ No online modules to update';\n    return [null, msg];\n}\n\n// Create network update messages for all online modules\nconst networkMessages = onlineModules.map(moduleId => ({\n    topic: `cocktail/bottle/${moduleId}/cmd`,\n    payload: {\n        action: 'wifi',\n        ssid: settings.home_ssid,\n        pass: settings.home_pass,\n        timestamp: new Date().toISOString(),\n        source: 'network_update'\n    }\n}));\n\nmsg.notification = `📶 Network settings sent to ${onlineModules.length} module(s)`;\nnode.log(`Network update sent to modules: ${onlineModules.join(', ')}`);\n\n// Return notification and all network messages\nreturn [null, msg].concat(networkMessages);",
        "outputs": 20,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1220,
        "wires": [
            [],
            [
                "5c6d623f60423b92"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ],
            [
                "94fb67ebea48424f"
            ]
        ]
    },
    {
        "id": "887518357079336b",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "System Status",
        "func": "const active = global.get('active_modules') || {};\nconst registered = flow.get('registered_modules') || {};\n\nlet onlineCount = 0;\nlet totalCount = Object.keys(registered).length;\n\nfor (const key in registered) {\n    if (active[key]) {\n        const timeDiff = new Date() - new Date(active[key].lastUpdate);\n        const isRecent = timeDiff < 30000;\n        \n        if (active[key].online && isRecent) {\n            onlineCount++;\n        }\n    }\n}\n\nlet statusText = '🍹 Cocktail Machine System - Working Version';\nlet statusColor = '#4caf50';\n\nif (totalCount === 0) {\n    statusText += ' - No modules registered';\n    statusColor = '#666';\n} else if (onlineCount === totalCount) {\n    statusText += ` - All ${totalCount} modules online`;\n} else {\n    statusText += ` - ${onlineCount}/${totalCount} modules online`;\n    statusColor = onlineCount > 0 ? '#ff9800' : '#f44336';\n}\n\n// Build dashboard modules list\nlet modulesList = 'Registered Modules:\\n';\nlet count = 0;\n\nfor (const key in registered) {\n    count++;\n    const module = registered[key];\n    const activeModule = active[key];\n    \n    let status = 'Offline';\n    let level = '--';\n    \n    if (activeModule) {\n        const timeDiff = new Date() - new Date(activeModule.lastUpdate);\n        const isRecent = timeDiff < 30000; // Within 30 seconds\n        \n        if (activeModule.online && isRecent) {\n            status = 'Online';\n        } else if (activeModule.online && !isRecent) {\n            status = 'Stale';\n        }\n        \n        if (activeModule.state && activeModule.state.valid) {\n            level = `${activeModule.state.pct}%`;\n        }\n    }\n    \n    modulesList += `${count}. ${module.name} (${key}) - ${level} - ${status}\\n`;\n}\n\nif (count === 0) {\n    modulesList += 'No registered modules';\n}\n\nreturn [\n    {payload: statusText, color: statusColor},\n    {payload: modulesList}\n];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 60,
        "wires": [
            [
                "271de7134331f873"
            ],
            [
                "773e3dac8684dc20"
            ]
        ]
    },
    {
        "id": "271de7134331f873",
        "type": "ui_text",
        "z": "d6dc8e9180ceab44",
        "group": "ui_group_overview",
        "order": 1,
        "width": "6",
        "height": "1",
        "name": "System Status",
        "label": "",
        "format": "<div style=\"text-align: center; font-size: 1.3em; font-weight: bold; color: {{msg.color}};\">{{msg.payload}}</div>",
        "layout": "col-center",
        "className": "",
        "x": 790,
        "y": 60,
        "wires": []
    },
    {
        "id": "773e3dac8684dc20",
        "type": "ui_text",
        "z": "d6dc8e9180ceab44",
        "group": "ui_group_dashboard_modules",
        "order": 1,
        "width": "6",
        "height": "4",
        "name": "Dashboard Module List",
        "label": "",
        "format": "<pre style=\"font-size: 12px; line-height: 1.2;\">{{msg.payload}}</pre>",
        "layout": "col-center",
        "className": "",
        "x": 790,
        "y": 100,
        "wires": []
    },
    {
        "id": "94fb67ebea48424f",
        "type": "mqtt out",
        "z": "d6dc8e9180ceab44",
        "name": "MQTT Out",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker",
        "x": 630,
        "y": 1000,
        "wires": []
    },
    {
        "id": "5c6d623f60423b92",
        "type": "ui_toast",
        "z": "d6dc8e9180ceab44",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Notifications",
        "x": 780,
        "y": 1100,
        "wires": []
    },
    {
        "id": "35f4e2efb63f9022",
        "type": "function",
        "z": "d6dc8e9180ceab44",
        "name": "function 2",
        "func": "// Make sure the dropdown always receives an ARRAY of {label, value}\n// Strip any stray \"type\" fields and mirror to ui_control.options.\n// Also avoid sending an option-shaped object as payload.\n\nlet opts = msg.options ?? msg.ui_control?.options ?? null;\n\nif (opts && !Array.isArray(opts)) {\n  // someone sent a single object -> wrap it\n  opts = [opts];\n}\n\nif (Array.isArray(opts)) {\n  opts = opts.map(o => {\n    if (typeof o === 'string') return { label: o, value: o };\n    return { label: o.label ?? String(o.value ?? ''), value: o.value ?? '' };\n  });\n  msg.options = opts;\n  msg.ui_control = Object.assign({}, msg.ui_control, { options: opts, replace: true });\n}\n\n// if payload looks like an option object, clear it so UI doesn't misinterpret it\nif (msg.payload && typeof msg.payload === 'object' &&\n   ('label' in msg.payload || 'value' in msg.payload)) {\n  msg.payload = '';\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 140,
        "wires": [
            [
                "70f366edeca288c5"
            ]
        ]
    }
]